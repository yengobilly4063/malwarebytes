import { Cart } from "../db/entities/cart.entity";
import { getRepository, Repository } from "typeorm";
import { CartStatus } from "../db/common/types";
import { Service } from "typedi";
import { ApolloError } from "apollo-server-errors";

@Service()
export class CartService {
  createUserCart = async (userId: string): Promise<Cart> => {
    const errorMessage: string = "Internal server error: Unable to create user cart";
    try {
      const cartRepository = this.getCartRepository();
      return await cartRepository.save({ userId });
    } catch (error) {
      throw new ApolloError(errorMessage, "500");
    }
  };

  getCurrentUserCart = async (userId: string): Promise<Cart> => {
    const cartRepository = this.getCartRepository();
    let cart: Cart;
    cart = await cartRepository.findOne({ userId, status: CartStatus.PENDING });
    if (!cart) {
      cart = await this.createUserCart(userId);
    }
    return cart;
  };

  private getCartRepository(): Repository<Cart> {
    return getRepository(Cart);
  }
}
