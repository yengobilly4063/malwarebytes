import {
  addItemToCart,
  getCartInfo,
  removeItemFromCart,
  storeCartInfo,
} from "../../../common/local-storage/cart.local";
import { Cart, CartItem } from "../../../models/cart.model";
import { IState, StoreStates } from "../../state.interfaces";
import { CartActionConstants, CartActionType, CartState } from "./cart.types";

const initialState: CartState = {
  cart: getCartInfo(),
};

const cartReducer = (state: IState[StoreStates.CART] = initialState, action: CartActionType) => {
  switch (action.type) {
    case CartActionConstants.ADD: {
      const newCartItem = action.payload as CartItem;

      const newCart = addItemToCart(newCartItem);

      storeCartInfo(newCart);
      return { ...state, cart: newCart };
    }

    case CartActionConstants.REMOVE: {
      const newCartItem = action.payload as CartItem;

      const newCart = removeItemFromCart(newCartItem);

      return { ...state, cart: newCart };
    }

    case CartActionConstants.LOAD_CART: {
      storeCartInfo(action.payload as Cart);

      return {
        ...state,
        cart: action.payload,
      };
    }

    default:
      return state;
  }
};

export const getCartState = (state: IState) => state[StoreStates.CART];

export default cartReducer;
