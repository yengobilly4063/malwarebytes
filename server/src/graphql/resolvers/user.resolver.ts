import { User } from "../../db/entities/user.entity";

import { Arg, Authorized, Ctx, Mutation, Query, Resolver, Root } from "type-graphql";
import { CreateUserInput, LoginUserInput } from "../schemas/user.schema";
import { UserService } from "../../services";
import { Service } from "typedi";
import { Context } from "../types";

@Service()
@Resolver(() => User)
export default class UserResolver {
  constructor(private readonly userService: UserService) {}

  @Mutation(() => User)
  async registerUser(@Arg("input") input: CreateUserInput): Promise<User> {
    try {
      return this.userService.registerUser(input);
    } catch (error) {
      throw new Error(error.message);
    }
  }

  @Mutation(() => String)
  loginUser(@Arg("input") input: LoginUserInput, @Ctx() context: Context): Promise<String> {
    try {
      return this.userService.loginUser(input, context);
    } catch (error) {
      throw new Error(error.message);
    }
  }

  @Query(() => User)
  @Authorized()
  me(@Ctx() context: Context): User {
    return context.user;
  }
}
