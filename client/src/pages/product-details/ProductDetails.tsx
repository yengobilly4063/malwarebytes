import { useMutation } from "@apollo/client";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getCurrentCartItem } from "../../common/local-storage/cart.local";
import { ADD_TO_CART } from "../../graphql/mutations/cart.mutations";
import { GET_CART } from "../../graphql/queries/cart.query";
import { GET_PRODUCTS } from "../../graphql/queries/product.query";
import { CartItem, CreateCartItemInput } from "../../models/cart.model";
import { Product } from "../../models/product.model";
import { addCartItemToCart, removeCartItemFromCart } from "../../store/reducers/cart/cart.action-creators";
import { getCartState } from "../../store/reducers/cart/cart.reducer";
import { closeModal } from "../../store/reducers/modal/modal.action-creators";
import styles from "./ProductDetails.module.scss";

interface IProps {
  product?: Product;
}

const ProductDetails: React.FC<IProps> = ({ product }) => {
  const [currentCartItem, setCurrentCartItem] = useState<CartItem | null>(getCurrentCartItem(product?.id!));
  const [quantity, setQuantity] = useState<number>(product?.quantity!);
  let [cartQty, setCartQty] = useState<number>(currentCartItem?.quantity ? currentCartItem.quantity : 0);

  const [addToCart, {}] = useMutation(ADD_TO_CART, { refetchQueries: [GET_PRODUCTS, GET_CART] });

  const dispatch = useDispatch();

  const { cart } = useSelector(getCartState);

  const enableAddButton = (): boolean => {
    return quantity === 0;
  };

  const enableRemoveButton = (): boolean => {
    return cartQty === 0;
  };

  const handleAddItemToCart = () => {
    setQuantity((prevQty) => (prevQty -= 1));
    setCartQty((prevQty) => (prevQty += 1));
    const cartItem: CartItem = resolveCartItem();
    dispatch(addCartItemToCart(cartItem));
  };

  const handleRemoveItemFromCart = () => {
    setCartQty((prevQty) => (prevQty -= 1));
    setQuantity((prevQty) => (prevQty += 1));
    const cartItem: CartItem = resolveCartItem();
    dispatch(removeCartItemFromCart(cartItem));
  };

  const resolveCartItem = (): CartItem => {
    let newCartItem: CartItem;
    if (!currentCartItem) {
      newCartItem = {
        id: "",
        productId: product?.id,
        productName: product?.name,
        price: product?.price,
        quantity: 1,
      };
    } else {
      newCartItem = {
        ...currentCartItem,
        quantity: cartQty,
      };
    }
    return newCartItem;
  };

  useEffect(() => {}, [currentCartItem]);

  const closeAndSaveCartItem = () => {
    let cartItem: CartItem | null = getCurrentCartItem(product?.id!);
    if (cartItem) {
      const { productName, ...rest } = cartItem;
      const input: CreateCartItemInput = {
        id: rest.id,
        cartId: cart?.id,
        productId: rest.productId,
        price: rest.price,
        quantity: cartQty,
      };
      addToCart({ variables: { input: { ...input } } });
    }
    dispatch(closeModal());
  };

  return (
    <div className={styles.wrapper}>
      <section className={styles.product}>
        <span>{1}</span>
        <span className={styles.name}>{product?.name}</span>
        <span className={styles.price}>{`$${product?.price}`}</span>
        <span className={styles.quantity}>{quantity}</span>
      </section>
      <section className={styles.descriptionAction}>
        <span className={styles.description}>{product?.description}</span>
        <div className={styles.action}>
          <button className={styles.add} disabled={enableAddButton()} onClick={handleAddItemToCart}>
            Add to cart
          </button>
          <button className={styles.remove} disabled={enableRemoveButton()} onClick={handleRemoveItemFromCart}>
            Remove from cart
          </button>
          <span className={styles.cart}>{`this item in cart: ${cartQty}`}</span>
          <button className={styles.close} onClick={closeAndSaveCartItem}>
            Close {`&`} Save
          </button>
        </div>
      </section>
    </div>
  );
};

export default ProductDetails;
