import { useLazyQuery, useQuery } from "@apollo/client";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useHistory } from "react-router";
import { CartItemDiff, getCartItemsDiff } from "../../common/helpers/cart.helper";
import { sessionToken, storeAuthUser } from "../../common/local-storage/auth.local";
import { cartDiff } from "../../common/local-storage/cart.local";
import { storeModalData } from "../../common/local-storage/modal.local";
import Loading from "../../components/loading/Loading";
import ProductList from "../../components/product-list/ProductList";
import { GET_CART } from "../../graphql/queries/cart.query";
import { GET_PRODUCTS } from "../../graphql/queries/product.query";
import { GET_AUTH_USER } from "../../graphql/queries/user.query";
import { Cart } from "../../models/cart.model";
import { Product } from "../../models/product.model";
import { getAuthenticatedUser } from "../../store/reducers/auth/auth.action-creators";
import { getAuthUserState } from "../../store/reducers/auth/auth.reducer";
import { loadCart } from "../../store/reducers/cart/cart.action-creators";
import { getCartState } from "../../store/reducers/cart/cart.reducer";
import { closeModal } from "../../store/reducers/modal/modal.action-creators";
import styles from "./HomePage.module.scss";

const HomePage = () => {
  const [products, setProducts] = useState<Array<Product>>([]);
  const { loading, data: fetchedProducts } = useQuery(GET_PRODUCTS);

  const { isAuth } = useSelector(getAuthUserState);
  const { cart: localCartState } = useSelector(getCartState);

  const history = useHistory();

  const [changedCartItems, setChangedCartItems] = useState<Array<CartItemDiff>>([]);

  const [getAuthUser, { data: authUser }] = useLazyQuery(GET_AUTH_USER);
  const [lodaCartItems, { data: fetchedCart }] = useLazyQuery(GET_CART);

  const dispatch = useDispatch();

  useEffect(() => {
    if (isAuth) {
      getAuthUser();
      lodaCartItems();
    }
  }, [isAuth]);

  useEffect(() => {
    if (authUser) {
      const { user } = authUser;
      storeAuthUser(user);
      dispatch(getAuthenticatedUser(user));
    }
  }, [authUser]);

  useEffect(() => {
    if (fetchedProducts) {
      const { products } = fetchedProducts;
      setProducts(products);
    }
  }, [fetchedProducts]);

  useEffect(() => {
    dispatch(closeModal());
  }, [history]);

  useEffect(() => {
    if (fetchedCart) {
      const { cart: dbCart } = fetchedCart;

      if (!window.sessionStorage.getItem(sessionToken)) {
        lodaCartItems();

        const cartDiff = getCartItemsDiff(dbCart, localCartState as Cart);

        setChangedCartItems(cartDiff);
        storeModalData(cartDiff as CartItemDiff);
        dispatch(loadCart(dbCart));
        window.sessionStorage.setItem(sessionToken, JSON.stringify(Date.now()));
      } else {
        dispatch(loadCart(dbCart));
      }
    }
  }, [fetchedCart, window.sessionStorage]);

  if (loading) {
    return <Loading />;
  }

  if (changedCartItems.length > 0) {
    localStorage.setItem(cartDiff, JSON.stringify(changedCartItems));
    history.push("/review");
  }
  return <div className={styles.wrapper}>{fetchedProducts && <ProductList products={products} />}</div>;
};

export default HomePage;
