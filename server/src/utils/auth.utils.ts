import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { User } from "src/db/entities";
import * as _env from "../config";
import { Context } from "../graphql/types";

export const generateToken = (user: User): string => {
  const { password, ...signUser } = user;
  return jwt.sign({ ...signUser }, _env.JWT_SECRETE_KEY, { expiresIn: _env.JWT_EXPIRATION });
};

export const hashPassword = async (password: string): Promise<string> => {
  return await bcrypt.hash(password, 10);
};

export const comparePassword = async (enteredPassword: string, hashedPassword: string): Promise<boolean> => {
  return await bcrypt.compare(enteredPassword, hashedPassword);
};

export const verifyToken = <T>(token: string): T | null => {
  try {
    return jwt.verify(token, _env.JWT_SECRETE_KEY) as T;
  } catch (error) {
    return null;
  }
};

export const setContextUser = async (context: Context): Promise<Context> => {
  if (context.req.headers.authorization) {
    const token = context.req.headers.authorization.split(" ")[1];
    const user = verifyToken<User>(token);
    context.user = user;
  }
  return context;
};
