import { useMutation } from "@apollo/client";
import React, { FormEvent, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Link, useHistory } from "react-router-dom";
import { storeAccessToken } from "../../common/local-storage/auth.local";
import "../../global-styles/form.scss";
import { LOGIN_USER } from "../../graphql/mutations/auth.mutations";
import { User } from "../../models/user.model";
import { authenticateUser } from "../../store/reducers/auth/auth.action-creators";
import { getAuthUserState } from "../../store/reducers/auth/auth.reducer";

const initialFormState: User = { username: "", password: "" };

const LoginUser = () => {
  const dispatch = useDispatch();
  const history = useHistory();
  const [input, setInput] = useState<User>(initialFormState);
  const [inputError, setInputError] = useState<User>(initialFormState);
  const { isAuth } = useSelector(getAuthUserState);

  const [loginUser, { error, data }] = useMutation(LOGIN_USER);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.currentTarget;

    setInput((prevInput) => {
      return {
        ...prevInput,
        [name]: value,
      };
    });
  };

  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    checkFormErrors();
    if (!input.username || !input.password) return;
    loginUser({ variables: { input: { ...input } } });
  };

  useEffect(() => {
    if (data) {
      const { token } = data;
      storeAccessToken(token);
      dispatch(authenticateUser());
    }
  }, [data, dispatch]);

  useEffect(() => {
    if (isAuth) history.replace("/");
  }, [isAuth, history]);

  const checkFormErrors = (): void => {
    if (!input.password)
      setInputError((prevError) => {
        return {
          ...prevError,
          ["password"]: "Password is required!",
        };
      });
    if (!input.username)
      setInputError((prevError) => {
        return {
          ...prevError,
          ["username"]: "Username is required!",
        };
      });
    setTimeout(() => {
      clearErrors();
    }, 2000);
  };

  const clearErrors = () => {
    setInputError(initialFormState);
  };

  return (
    <div className="form-wrapper">
      <form onSubmit={handleFormSubmit}>
        <h1>Log In</h1>
        <div className="form-group">
          <label htmlFor="username">Username:</label>
          <input
            placeholder="Username"
            type="text"
            id="username"
            className="form-control"
            name="username"
            onChange={handleInputChange}
          />
          {inputError.username && <span className="form-error">{inputError.username}</span>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password:</label>
          <input
            placeholder="Password"
            type="password"
            id="password"
            className="form-control"
            name="password"
            onChange={handleInputChange}
          />
          {inputError.password && <span className="form-error">{inputError.password}</span>}
        </div>
        <div className="form-group">
          <div>{error && <span className="form-error">{error?.message}</span>}</div>
        </div>
        <div className="form-action">
          <button type="submit" className="btn btn-main">
            Login
          </button>
        </div>
        <div className="form-group">
          <div className="login-register">
            <span>Don't have an account?</span>
            <Link to="/register">Register</Link>
          </div>
        </div>
      </form>
    </div>
  );
};

export default LoginUser;
