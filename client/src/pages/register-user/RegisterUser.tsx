import { useMutation } from "@apollo/client";
import React, { FormEvent, useEffect, useState } from "react";
import { useHistory } from "react-router";
import { Link } from "react-router-dom";
import { REGISTER_USER } from "../../graphql/mutations/auth.mutations";
import { User } from "../../models/user.model";
import "../../global-styles/form.scss";

const initialFormState: User = { username: "", password: "" };
const RegisterUser = () => {
  const history = useHistory();

  const [registerUser, { error, data, called }] = useMutation(REGISTER_USER);

  const [input, setInput] = useState<User>(initialFormState);
  const [inputError, setInputError] = useState<User>(initialFormState);

  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    checkFormErrors();
    if (!input.username || !input.password || !input.name) return;
    const { id, ...userInput } = input;
    registerUser({ variables: { input: { ...userInput } } });
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.currentTarget;

    setInput((prevInput) => {
      return {
        ...prevInput,
        [name]: value,
      };
    });
  };

  const checkFormErrors = (): void => {
    if (!input.name)
      setInputError((prevError) => {
        return {
          ...prevError,
          ["name"]: "Name is required!",
        };
      });
    if (!input.password)
      setInputError((prevError) => {
        return {
          ...prevError,
          ["password"]: "Password is required!",
        };
      });
    if (!input.username)
      setInputError((prevError) => {
        return {
          ...prevError,
          ["username"]: "Username is required!",
        };
      });

    setTimeout(() => {
      clearErrors();
    }, 2000);
  };

  useEffect(() => {
    if (data?.user) {
      history.push("/login");
    }
  }, [data, called, history]);

  const clearErrors = () => {
    setInputError(initialFormState);
  };

  return (
    <div className="form-wrapper">
      <form onSubmit={handleFormSubmit}>
        <h1>Register User</h1>
        <div className="form-group">
          <label htmlFor="name">Name:</label>
          <input
            placeholder="Name..."
            type="text"
            id="name"
            className="form-control"
            name="name"
            onChange={handleInputChange}
          />
          {inputError.name && <span className="form-error">{inputError.name}</span>}
        </div>
        <div className="form-group">
          <label htmlFor="username">Username:</label>
          <input
            placeholder="Username..."
            type="text"
            id="username"
            className="form-control"
            name="username"
            onChange={handleInputChange}
          />
          {inputError.username && <span className="form-error">{inputError.username}</span>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password:</label>
          <input
            placeholder="Password..."
            type="password"
            id="password"
            className="form-control"
            name="password"
            onChange={handleInputChange}
          />
          {inputError.password && <span className="form-error">{inputError.password}</span>}
        </div>
        <div className="form-group">
          <div>{error && <span className="form-error">{error?.message}</span>}</div>
        </div>
        <div className="form-action">
          <button type="submit" className="btn btn-main">
            Register
          </button>
        </div>
        <div className="form-group">
          <div className="login-register">
            <span>Have an account?</span>
            <Link to="/login">Log In</Link>
          </div>
        </div>
      </form>
    </div>
  );
};

export default RegisterUser;
