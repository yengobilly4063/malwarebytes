import { CartItem } from "../db/entities/cart-item.entity";
import { DeleteResult, getRepository, Repository } from "typeorm";
import { getConnection } from "typeorm";
import { Product } from "../db/entities";
import { Service } from "typedi";
import { CreateCartItemOutput, CreateCartItemInput } from "src/graphql/schemas/cart.schema";
import { CART_ITEMS_QUERY } from "../graphql/sql/cart.items.query";

@Service()
class CartItemService {
  addCartItem = async (input: CreateCartItemInput): Promise<CreateCartItemOutput> => {
    const cartItemRepository = this.getCartItemRepository();
    let prevCartItemQty: number = 0;
    let newCartItem: CartItem;

    if (input.id === "0" || input.id === "" || input.id === undefined) {
      delete input.id;
      newCartItem = cartItemRepository.create({ ...input });
    } else {
      newCartItem = input;
      const previousCartItem = await this.getCartItemById(input.id);
      prevCartItemQty = previousCartItem.quantity;
    }

    const cartItem = await cartItemRepository.save(newCartItem);

    await this.updateProductQuantity(cartItem.productId, prevCartItemQty, cartItem.quantity);

    if (cartItem.quantity === 0) {
      await this.deleteCartItem(cartItem.id);
    }

    return cartItem;
  };

  getCartItems = async (cartId: string, userId: string): Promise<Array<CartItem>> => {
    const connection = getConnection();

    const items: Array<CartItem> = await connection.query(` ${CART_ITEMS_QUERY}`, [cartId, userId]);

    return items;
  };

  private deleteCartItem = async (id: string): Promise<boolean> => {
    const cartItemRepository = this.getCartItemRepository();
    const result: DeleteResult = await cartItemRepository.delete({ id });
    return result.affected > 0;
  };

  private getCartItemById = async (id: string): Promise<CartItem> => {
    const cartItemRepository = this.getCartItemRepository();
    return await cartItemRepository.findOne({ id });
  };

  updateProductQuantity = async (
    productId: string,
    prevCartItemQty: number,
    curCartItemQty: number
  ): Promise<Product> => {
    const productRepository = this.getProductRepository();

    let product: Product = await productRepository.findOne({ id: productId });
    const productCartQtyDiff = prevCartItemQty - curCartItemQty;

    product.quantity += productCartQtyDiff;

    return await productRepository.save(product);
  };

  private getProductRepository = (): Repository<Product> => {
    return getRepository(Product);
  };

  private getCartItemRepository = (): Repository<CartItem> => {
    return getRepository(CartItem);
  };
}

export default CartItemService;
