import { useLazyQuery, useQuery } from "@apollo/client";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getAccessToken, storeAuthUser } from "../../common/local-storage";
import Loading from "../../components/loading/Loading";
import ProductList from "../../components/product-list/ProductList";
import { GET_PRODUCTS } from "../../graphql/queries/product.query";
import { GET_AUTH_USER } from "../../graphql/queries/user.query";
import { Product } from "../../models/product.model";
import { getAuthenticatedUser } from "../../store/reducers/auth/auth.action-creators";
import { getAuthUserState } from "../../store/reducers/auth/auth.reducer";
import styles from "./HomePage.module.scss";

const HomePage: React.FC = () => {
  const [products, setProducts] = useState<Array<Product>>([]);
  const { loading, data } = useQuery(GET_PRODUCTS, { fetchPolicy: "network-only" });
  const { isAuth } = useSelector(getAuthUserState);
  const [getAuthUser, { data: authUser }] = useLazyQuery(GET_AUTH_USER);
  const dispatch = useDispatch();

  useEffect(() => {
    if (isAuth) {
      getAuthUser();
    }
  }, [isAuth]);

  useEffect(() => {
    if (authUser) {
      const { user } = authUser;
      storeAuthUser(user);
      dispatch(getAuthenticatedUser(user));
    }
  }, [authUser]);

  useEffect(() => {
    if (data) {
      const { products: fetchedProducts } = data;
      setProducts(fetchedProducts);
    }
  }, [data]);

  return (
    <div className={styles.wrapper}>
      {loading && <Loading />}
      {data && <ProductList products={products} />}
    </div>
  );
};

export default HomePage;
