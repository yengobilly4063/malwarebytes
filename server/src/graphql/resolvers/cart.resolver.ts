import { Cart, CartItem } from "../../db/entities";
import { CartItemService, CartService } from "../../services";
import { Arg, Authorized, Ctx, FieldResolver, Mutation, Query, Resolver, Root } from "type-graphql";
import { Service } from "typedi";
import { Context } from "../types";
import { CreateCartItemOutput, CreateCartItemInput } from "../schemas/cart.schema";

@Resolver(() => Cart || CartItem)
@Service()
class CartResolver {
  constructor(private readonly cartService: CartService, private readonly cartItemService: CartItemService) {}

  @Query(() => Cart)
  @Authorized()
  async getCart(@Ctx() ctx: Context): Promise<Cart> {
    const {
      user: { id },
    } = ctx;
    return await this.cartService.getCurrentUserCart(id);
  }

  @Mutation(() => CreateCartItemOutput)
  @Authorized()
  async addCartItem(@Arg("input") input: CreateCartItemInput): Promise<CreateCartItemOutput> {
    return await this.cartItemService.addCartItem(input);
  }

  @Authorized()
  @FieldResolver(() => [CartItem])
  async items(@Root() cart: Cart): Promise<Array<CartItem>> {
    const { id } = cart;
    return await this.cartItemService.getCartItems(id);
  }
}

export default CartResolver;
