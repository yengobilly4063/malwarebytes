import { User } from "../db/entities/user.entity";
import { getRepository, Repository } from "typeorm";
import { hashPassword, comparePassword, generateToken } from "../utils/auth.utils";
import { CreateUserInput, LoginUserInput } from "src/graphql/schemas/user.schema";
import { Service } from "typedi";
import { ApolloError } from "apollo-server-errors";
import { CartService } from ".";
import { Context } from "../graphql/types";
import * as _env from "../config";

@Service()
export class UserService {
  constructor(private readonly cartService: CartService) {}

  async registerUser(input: CreateUserInput): Promise<User> {
    const userRepository = this.getUserRepository();
    const { username, password } = input;
    let user = await this.getUserByUsername(username);

    if (user) throw new ApolloError("User already exists");

    user = await userRepository.save({ ...input, password: await hashPassword(password) }, { reload: true });

    await this.cartService.createUserCart(user.id);

    return user;
  }

  async loginUser(input: LoginUserInput, context: Context): Promise<String> {
    const errorMessage: string = "Invalid user credentials";
    const { username, password } = input;

    let user: User = await this.getUserByUsername(username);

    if (!user) throw new ApolloError(errorMessage);

    const isValidPassword: boolean = await comparePassword(password, user.password);

    if (!isValidPassword) throw new ApolloError(errorMessage);

    const token = generateToken(user);

    return token;
  }

  private async getUserByUsername(username: string): Promise<User> {
    const userRepository = this.getUserRepository();
    return await userRepository.findOne({ username });
  }

  private getUserRepository(): Repository<User> {
    return getRepository(User);
  }
}
